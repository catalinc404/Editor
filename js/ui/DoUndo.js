////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function DoUndoManager( eventDispatcher )
{
    this.eventDispatcher = eventDispatcher;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    this.operations = [];
    this.currentOperationIndex = -1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DoUndoManager.prototype = Object.assign( Object.create( Object.prototype ), 
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    constructor: DoUndoManager
} );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DoUndoManager.prototype.clearCommands = function( command )
{
    this.operations = [];
    this.currentOperationIndex = -1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DoUndoManager.prototype.addCommand = function( command )
{
    this.operations.splice( this.currentOperationIndex );
    this.operations.push( command );
    this.currentOperationIndex = this.operations.length - 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DoUndoManager.prototype.do = function()
{
    if ( this.currentOperationIndex < this.operations.length )
    {
        this.operations[ this.currentOperationIndex ].do();
        this.currentOperationIndex++;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DoUndoManager.prototype.undo = function()
{
    if ( (this.currentOperationIndex > 0) && (this.currentOperationIndex <= this.operations.length) )
    {
        this.currentOperationIndex--;
        this.operations[ this.currentOperationIndex ].undo();
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DoUndoManager.prototype.redo = function()
{
    if ( this.currentOperationIndex < this.operations.length )
    {
        this.operations[ this.currentOperationIndex ].redo();
        this.currentOperationIndex++;
    }
}

